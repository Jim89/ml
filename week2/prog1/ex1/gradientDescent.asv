function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    
    % set up constant
    const = alpha * 1/m;
    
    % set up calculations
    theta0 = theta(1);
    theta1 = theta(2);
    
    % perform common calculation
    hx = X*theta;
    e = (hx - y);
    
    
    
    
    
    e_adj = e .* X(:, 2);
    summat = sum(e_adj);
    
    adjustment = const * summat
    
    temp0 = theta(1) - adjustment
    temp1 = theta(2) - adjustment




    % ============================================================

    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
